{"version":3,"sources":["Tab1.js","Tab2.js","Tab3.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["Tab1","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","React","Component","Tab2","Tab3","Home","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","state","handleChange","event","console","log","setState","Paper_default","Tabs_default","onChange","indicatorColor","textColor","centered","Tab_default","label","Tab1_Tab1","undefined","Tab2_Tab2","Tab3_Tab3","App","className","Home_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5da1639f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport class Tab1 extends React.Component{\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h1>This is how Tab 1 content routes....</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\n\r\nexport class Tab2 extends React.Component{\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h1>This is how Tab 2 content routes....</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\n\r\nexport class Tab3 extends React.Component{\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h1>This is how Tab 3 content routes....</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\n// import { withStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nimport {Tab1} from './Tab1.js';\r\nimport {Tab2} from './Tab2.js';\r\nimport {Tab3} from './Tab3.js';\r\n\r\nexport const styles = {\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n};\r\n\r\nexport class Home extends React.Component{\r\n\r\n  state = {\r\n    value: 0,\r\n  };\r\n\r\n  handleChange = (event, value) => {\r\n    console.log(value);\r\n    this.setState({ value });\r\n  };\r\n\r\n  render(){\r\n    return(\r\n        <div>\r\n          <Paper>\r\n            <Tabs\r\n              value={this.state.value}\r\n              onChange={this.handleChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              centered\r\n            >\r\n              <Tab label=\"TAB 1\" />\r\n              <Tab label=\"TAB 2\" />\r\n              <Tab label=\"TAB 3\" />\r\n            </Tabs>\r\n          </Paper>\r\n            {this.state.value === 0 ? <Tab1 /> : undefined}\r\n            {this.state.value === 1 ? <Tab2 /> : undefined}\r\n            {this.state.value === 2 ? <Tab3 /> : undefined}\r\n          </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport {Home} from './Home.js';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Home />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}